C51 COMPILER V9.53.0.0   FUNCTION_GENERATOR                                                05/08/2017 00:17:31 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE FUNCTION_GENERATOR
OBJECT MODULE PLACED IN .\src\function_generator.OBJ
COMPILER INVOKED BY: C:\SiliconLabs\SimplicityStudio\v4\developer\toolchains\keil_8051\9.53\BIN\C51.exe ..\src\function_
                    -generator.c OMF2 SMALL DEBUG OBJECTEXTEND ROM(LARGE) WARNINGLEVEL(2) FLOATFUZZY(3) OPTIMIZE(8,SPEED) DEFINE(DEBUG=1) INT
                    -VECTOR(0X0000) INTPROMOTE INCDIR(C:\Users\Ali Rahman\SimplicityStudio\v4_workspace\EFM8BB3_Final\inc\graphics;C:\Users\A
                    -li Rahman\SimplicityStudio\v4_workspace\EFM8BB3_Final\inc;C:\Users\Ali Rahman\SimplicityStudio\v4_workspace\EFM8BB3_Fina
                    -l\inc\config;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.0.3//kits/common/bsp;C:/SiliconLabs/SimplicityStu
                    -dio/v4/developer/sdks/8051/v4.0.3//kits/EFM8BB3_SLSTK2022A/config;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051
                    -/v4.0.3//Device/EFM8BB3/peripheral_driver/inc;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.0.3//kits/common
                    -/drivers/efm8_joystick;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.0.3//kits/common/drivers/efm8_memory_lc
                    -d/inc;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.0.3//kits/common/drivers/efm8_memory_lcd/inc/graphics;C:
                    -/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.0.3//kits/common/drivers/efm8_memory_lcd/inc/config;C:/SiliconLa
                    -bs/SimplicityStudio/v4/developer/sdks/8051/v4.0.3//Device/shared/si8051base;C:/SiliconLabs/SimplicityStudio/v4/developer
                    -/sdks/8051/v4.0.3//Device/EFM8BB3/inc;C:/SiliconLabs/SimplicityStudio/v4/developer/sdks/8051/v4.0.3//kits/common/drivers
                    -/efm8_retargetserial) PRINT(.\src\function_generator.lst) COND PAGEWIDTH(120) PAGELENGTH(65) OBJECT(.\src\function_gener
                    -ator.OBJ)

line level    source

   1          /**************************************************************************//**
   2           * Copyright (c) 2015 by Silicon Laboratories Inc. All rights reserved.
   3           *
   4           * http://developer.silabs.com/legal/version/v11/Silicon_Labs_Software_License_Agreement.txt
   5           *****************************************************************************/
   6          ///////////////////////////////////////////////////////////////////////////////
   7          // function_generator.c
   8          ///////////////////////////////////////////////////////////////////////////////
   9          
  10          ///////////////////////////////////////////////////////////////////////////////
  11          
  12          //TO DO
  13          //Store Line as variable
  14          //Scroll outputs variables in different order
  15                  //Ex. if JOYSTICK_N  drawScreenText(row2, 1) drawScreenText(row3, 2) etc.
  16                  //if array has 20 characters (uses 20 bytes) z+10
  17                  //for normal input text writes on rowNum z
  18          
  19          ///////////////////////////////////////////////////////////////////////////////
  20          // Includes
  21          ///////////////////////////////////////////////////////////////////////////////
  22          
  23          #include "bsp.h"
  24          #include "tick.h"
  25          #include "disp.h"
  26          #include "render.h"
  27          #include "square.h"
  28          #include "joystick.h"
  29          #include "thinfont.h"
  30          #include "function_generator.h"
  31          #include "waveform_tables.h"
  32          #include "retargetserial.h"
  33          #include <SI_EFM8BB3_Register_Enums.h>
  34          #include "string.h"
  35          ///////////////////////////////////////////////////////////////////////////////
  36          // Globals
  37          ///////////////////////////////////////////////////////////////////////////////
  38          char outputstr[1];
  39          char output[16] = {0};
  40          int hextext;
  41          int z;
  42          char xdata savedinfo[26][16] = {0};
  43          char xdata testbuffer[16] = {0};
C51 COMPILER V9.53.0.0   FUNCTION_GENERATOR                                                05/08/2017 00:17:31 PAGE 2   

  44          int x;
  45          char xdata outputbuffer[16];
  46          int n;
  47          
  48          // Generic line buffer
  49          SI_SEGMENT_VARIABLE(Line[DISP_BUF_SIZE], uint8_t, RENDER_LINE_SEG);
  50          
  51          // Demo state variables
  52          
  53          // Frequency selection
  54          #define SUPPORTED_NUM_FREQ 1
  55          static SI_SEGMENT_VARIABLE(frequency[SUPPORTED_NUM_FREQ], uint16_t, SI_SEG_XDATA) = {
  56                          10L
  57          };
  58          
  59          // Current Frequency Selection
  60          static uint8_t currentFreqIndex = 1;
  61          
  62          // Phase offset (updated when frequency is changed)
  63          static uint16_t phaseOffset = 100 * PHASE_PRECISION / SAMPLE_RATE_DAC;
  64          
  65          // Kill splash
  66          KillSpash killSplashFlag = SHOW_SPLASH;
  67          
  68          ///////////////////////////////////////////////////////////////////////////////
  69          // Supporting Functions
  70          ///////////////////////////////////////////////////////////////////////////////
  71          
  72          //-----------------------------------------------------------------------------
  73          // getJoystick
  74          //-----------------------------------------------------------------------------
  75          //
  76          // Get new ADC sample and return joystick direction. Valid return values:
  77          //  JOYSTICK_NONE   JOYSTICK_N   JOYSTICK_S
  78          //  JOYSTICK_C      JOYSTICK_E   JOYSTICK_W
  79          //
  80          static uint8_t getJoystick(void)
  81          {
  82   1        uint32_t mv;
  83   1        uint8_t dir;
  84   1        ADC0CN0_ADBUSY = 1;
  85   1        while (!ADC0CN0_ADINT);
  86   1        ADC0CN0_ADINT = 0;
  87   1        mv = ((uint32_t)ADC0) * 3300 / 1024;
  88   1        dir = JOYSTICK_convert_mv_to_direction(mv);
  89   1        return dir;
  90   1      }
  91          
  92          //-----------------------------------------------------------------------------
  93          // getWaitJoystick
  94          //-----------------------------------------------------------------------------
  95          //
  96          // Get joystick input. If joystick was moved, wait for release. Return joystick
  97          // direction. Valid return values:
  98          //  JOYSTICK_NONE   JOYSTICK_N   JOYSTICK_S
  99          //  JOYSTICK_C      JOYSTICK_E   JOYSTICK_W
 100          //
 101          static uint8_t getWaitJoystick(void)
 102          {
 103   1        uint8_t dir, dirSave;
 104   1      
 105   1        dir = getJoystick();
 106   1        dirSave = dir;
C51 COMPILER V9.53.0.0   FUNCTION_GENERATOR                                                05/08/2017 00:17:31 PAGE 3   

 107   1      
 108   1        // wait for release then transition
 109   1        while (dir != JOYSTICK_NONE)
 110   1        {
 111   2          dir = getJoystick();
 112   2        }
 113   1      
 114   1        return dirSave;
 115   1      }
 116          
 117          //-----------------------------------------------------------------------------
 118          // drawScreenText
 119          //-----------------------------------------------------------------------------
 120          //
 121          // Show one line of text on the screen
 122          //
 123          // str - pointer to string text (0 - 21 characters) to display
 124          // rowNum - row number of the screen (0 - 127)
 125          // fontScale - font scaler (1 - 4)
 126          //
 127          static void drawScreenText(SI_VARIABLE_SEGMENT_POINTER(str, char, RENDER_STR_SEG), uint8_t rowNum)
 128          {
 129   1        uint8_t i;
 130   1      
 131   1        for (i = 0; i < FONT_HEIGHT; i++)
 132   1        {
 133   2          RENDER_ClrLine(Line);
 134   2          RENDER_StrLine(Line, 4, i, str);
 135   2          DISP_WriteLine(rowNum + i, Line);
 136   2        }
 137   1      }
 138          static void drawSplash(void)
 139          {
 140   1              uint16_t ticks = GetTickCount();
 141   1      
 142   1              while (((GetTickCount() - ticks) < 30) &&
 143   1                              (killSplashFlag == SHOW_SPLASH)
 144   1                              );
 145   1      }
 146          ///////////////////////////////////////////////////////////////////////////////
 147          // Interrupt Service Routines
 148          ///////////////////////////////////////////////////////////////////////////////
 149          
 150          SI_INTERRUPT_USING (TIMER4_ISR, TIMER4_IRQn, 1)
 151          {
 152   1        static uint16_t phaseAcc = 0;       // Holds phase accumulator
 153   1      
 154   1        SI_UU16_t temp;   // The temporary value that holds
 155   1                                                                                // value before being written
 156   1                                                                                // to the DAC
 157   1        
 158   1        TMR4CN0 &= ~TMR3CN0_TF3H__BMASK;    // Clear Timer4 overflow flag
 159   1      
 160   1        phaseAcc += phaseOffset;            // Increment phase accumulator
 161   1      
 162   1        // Read the table value
 163   1        temp.u16 = squareTable[phaseAcc >> 8];
 164   1      
 165   1        // Set the value of <temp> to the next output of DAC at full-scale
 166   1        // amplitude. The rails are 0x000 and 0xFFF. DAC low byte must be
 167   1        // written first.
 168   1      
 169   1        SFRPAGE = PG4_PAGE;
C51 COMPILER V9.53.0.0   FUNCTION_GENERATOR                                                05/08/2017 00:17:31 PAGE 4   

 170   1      
 171   1        DAC1L = DAC0L = temp.u8[LSB];
 172   1        DAC1H = DAC0H = temp.u8[MSB];
 173   1      }
 174          //-----------------------------------------------------------------------------
 175          // INT0_ISR
 176          //-----------------------------------------------------------------------------
 177          //
 178          // INT0 ISR Content goes here. Remember to clear flag bits:
 179          // TCON::IE0 (External Interrupt 0)
 180          //
 181          // Whenever a negative edge appears on P0.2, toggle LED_GREEN.
 182          // The interrupt pending flag is automatically cleared by vectoring to the ISR
 183          //
 184          //-----------------------------------------------------------------------------
 185          SI_INTERRUPT (INT0_ISR, INT0_IRQn)
 186          {
 187   1              hextext = 1;
 188   1      }
 189          
 190          
 191          //-----------------------------------------------------------------------------
 192          // INT1_ISR
 193          //-----------------------------------------------------------------------------
 194          //
 195          // INT1 ISR Content goes here. Remember to clear flag bits:
 196          // TCON::IE1 (External Interrupt 1)
 197          //
 198          // Whenever a negative edge appears on P0.3, toggle LED_BLUE.
 199          // The interrupt pending flag is automatically cleared by vectoring to the ISR
 200          //
 201          //-----------------------------------------------------------------------------
 202          SI_INTERRUPT (INT1_ISR, INT1_IRQn)
 203          {
 204   1              hextext = 0;
 205   1      }
 206          int m;
 207          int i;
 208          int y;
 209          //FUNCTIONS
 210          static void Scroll(void){
 211   1              DISP_ClearAll();
 212   1          for(n = y; n <17; n++){
 213   2              memcpy(outputbuffer, savedinfo[n], 16);
 214   2              drawScreenText(outputbuffer, m);
 215   2          m+=8;
 216   2          //}
 217   2      }
 218   1      }
 219          
 220          static void processScroll(uint8_t dir)
 221          {
 222   1        // process input
 223   1        if (dir == JOYSTICK_S)
 224   1        {
 225   2               y--;
 226   2               Scroll();
 227   2        }
 228   1        if (dir == JOYSTICK_N)
 229   1        {
 230   2               y++;
 231   2               Scroll();
 232   2        }
C51 COMPILER V9.53.0.0   FUNCTION_GENERATOR                                                05/08/2017 00:17:31 PAGE 5   

 233   1      }
 234          
 235          int j = 0;
 236          int k = 0;
 237          ///////////////////////////////////////////////////////////////////////////////
 238          // Driver Function
 239          ///////////////////////////////////////////////////////////////////////////////
 240          
 241          void FunctionGenerator_main(void)
 242          {
 243   1        unsigned char inputchar;
 244   1        hextext = 0;
 245   1        z = 0;
 246   1        x = 0;
 247   1        i = 0;
 248   1        n = 0;
 249   1        y = 0;
 250   1        DISP_ClearAll();
 251   1        SCON0_TI = 1;
 252   1        while(1)
 253   1        {
 254   2                drawSplash();
 255   2                RETARGET_PRINTF ("\nEnter character: ");
 256   2            inputchar = getchar();
 257   2            RETARGET_PRINTF ("\nCharacter entered: %c", inputchar);
 258   2            RETARGET_PRINTF ("\n     Value in Hex: %bx", inputchar);
 259   2                if(hextext == 0){
 260   3                        RETARGET_SPRINTF (outputstr, "%c", inputchar);
 261   3                        strcat(output,&outputstr);
 262   3                        i=strlen(output);
 263   3                        strcat(savedinfo[x],&outputstr);
 264   3                        if(i>16){
 265   4                                z+=8;
 266   4                                x++;
 267   4                                i = 0;
 268   4                                memset(output,0,16);
 269   4                                strcat(output,&outputstr);
 270   4                        }
 271   3                }
 272   2            if(hextext == 1){
 273   3                RETARGET_SPRINTF (outputstr, "%bx", inputchar);
 274   3                strcat(output,&outputstr);
 275   3                i=strlen(output);
 276   3                if(i>16){
 277   4                        z+=8;
 278   4                        i = 0;
 279   4                        memset(output,0,16);
 280   4                        strcat(output,&outputstr);
 281   4                }
 282   3                }
 283   2            drawScreenText(output,z);
 284   2      
 285   2      
 286   2            processScroll(getWaitJoystick());
 287   2        }
 288   1      }
 289          
 290          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    749    ----
   CONSTANT SIZE    =   4401    ----
C51 COMPILER V9.53.0.0   FUNCTION_GENERATOR                                                05/08/2017 00:17:31 PAGE 6   

   XDATA SIZE       =    466    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     41      12
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
